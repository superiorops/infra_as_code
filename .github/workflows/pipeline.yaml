name:  BuildInfra
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
  push:
   branches:
     - main
     - release/*
env:
  ENV: "dev"
  TF_STATE_RG: "infrabase" 
  TF_STORAGE_ACCOUNT_PREFIX: "demotf"
  LOCATION: "eastus"
  TF_CONTAINER: "tfstate"
  FIRST_RUN: True
  ACTION: "apply"
jobs:

  azure-test:    
    runs-on: "ubuntu-22.04"
    environment: AZ-DEV
    steps:
      - name: Checking source code  
        uses: actions/checkout@v3

      - name: Loading Environmnet variables
        shell: bash
        run: |
          while read line; do
            echo "$line" >> $GITHUB_ENV
          done < ./dev.env
      
      - name: AZ Login
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZ_CREDENTIALS }}'
            
      # Set up remote backend for Terraform State.

      - name: prebuild
        if: ${{ env.FIRST_RUN == 'True' }}
        run: |
           bash ./pre-build.sh
      
      - name: Pubkey for the VMs
        env:
          pub_key: ${{ vars.PUB_KEY }}    
        run: echo $pub_key >> TF/id_az.pub
      
      # Install the preferred version of Terraform CLI 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.7
      
      # Run Terraform Init

      - name: initialize Terraform
        timeout-minutes: 3
        id: init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.TF_STATE_RG }}
          STORAGE_ACCOUNT: "${{ env.TF_STORAGE_ACCOUNT }}"
          CONTAINER_NAME: ${{ env.TF_CONTAINER }}
        working-directory: TF

      - name: apply Terraform configuration
        if: ${{ env.ACTION == 'apply' }}
        timeout-minutes: 5 
        id: apply
        run: |
          terraform apply --auto-approve 
          echo "TF_OUTPUT=$(terraform output -json)" > tf_output.json
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.TF_STATE_RG }}
          STORAGE_ACCOUNT: "${{ env.TF_STORAGE_ACCOUNT }}"
          CONTAINER_NAME: ${{ env.TF_CONTAINER }}
        working-directory: TF

      
      - name: destroy Terraform configuration
        if: ${{ env.ACTION == 'destroy' }}
        timeout-minutes: 5 
        id: destroy
        run: |
          terraform destroy --auto-approve         
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.TF_STATE_RG }}
          STORAGE_ACCOUNT: "${{ env.TF_STORAGE_ACCOUNT }}"
          CONTAINER_NAME: ${{ env.TF_CONTAINER }}
        working-directory: TF  

      - name: view Terraform output
        run: |
           cat terraform


